commands:
  collect_test_results:
    description: |
      Store test reports to build artifacts.
      Locate any JUnit test reports and store them as build artifacts and test results.
      Store the HTML build report to build artifacts.
    parameters:
      reports_path:
        default: build/reports/
        description: Artifacts to be published
        type: string
      test_results_path:
        default: build/test-results/
        description: Results to be published
        type: string
    steps:
    - when:
        condition: <<parameters.test_results_path>>
        steps:
        - store_test_results:
            path: <<parameters.test_results_path>>
        - store_artifacts:
            destination: Results
            path: <<parameters.test_results_path>>
    - unless:
        condition: <<parameters.test_results_path>>
        steps:
        - run:
            command: |
              mkdir -p /tmp/test_results/junit
              find . -name '*TEST-*.xml' -exec cp -v {} /tmp/test_results/junit \;
            name: Gather Test Results
        - store_test_results:
            path: /tmp/test_results
        - store_artifacts:
            destination: Results
            path: /tmp/test_results
    - when:
        condition: <<parameters.reports_path>>
        steps:
        - store_artifacts:
            destination: Reports
            path: <<parameters.reports_path>>
    - unless:
        condition: <<parameters.reports_path>>
        steps:
        - store_artifacts:
            destination: Reports
            path: build/reports/tests/test/
  with_cache:
    description: |
      Run a set of steps with gradle dependencies cached.
      This command will first restore a cache of gradle dependencies, if one was
      saved by a previous build. The provided `steps` will then be executed, and
      if successful, then a fresh cache will be saved, if required.
      The contents of the `~/.gradle` directory is cached, which will substantially
      improve build times for projects with many dependencies.
      The cache-key is generated from any files named `build.gradle` that are
      present in the `working_directory`.
    parameters:
      steps:
        type: steps
    steps:
    - run:
        command: |
              # find build files
              buildFiles=$(find . -name 'build.gradle' | sed 's/.*/&/' | tr '\n' ' ')
              echo "build files are $buildFiles"
              #
              lastPreviousHash=$(git log -n 1 --pretty=format:%H HEAD~1 -- $buildFiles)
              echo "Last commit to modify build files is hash (excluding last commit) is $lastPreviousHash"
              lastHash=$(git log -n 1 --pretty=format:%H HEAD -- $buildFiles)
              #
              if [ "$lastPreviousHash" = "$lastHash" ]; then
                echo "Build files did not update last commit"
              else
                echo "Build files did update last commit"
              fi
              echo "$lastPreviousHash" > /tmp/git_previous_child
              echo "$lastHash" > /tmp/git_latest_child
              #
              # build grandparent and parent
              # alternatives
              # - master
              # - master, feature
              # - master, develop
              # - master, develop, feature
              #
              currentBranch=$(git rev-parse --abbrev-ref HEAD)
              if [ "$currentBranch" = "master" ]; then
                echo "Current branch is master"
                cp /tmp/git_latest_child /tmp/git_grandparent
                cp /tmp/git_latest_child /tmp/git_parent
              else
                parentBranch=$(git show-branch | sed "s/].*//" | grep "\*" | grep -v "$(git rev-parse --abbrev-ref HEAD)" | head -n1 | sed "s/^.*\[//")
                parentHash=$(git merge-base HEAD "remotes/origin/$parentBranch")
                lastParentChangesHash=$(git log -n 1 --pretty=format:%H $parentHash -- $buildFiles)
                #
                echo "Parent branch is $parentBranch, last commit to modify build files is $lastParentChangesHash"
                #
                echo "$lastParentChangesHash" > /tmp/git_parent
                if [ "$parentBranch" = "master" ]; then
                  echo "$parentHash" > /tmp/git_grandparent
                else
                  masterHash=$(git merge-base HEAD remotes/origin/master)
                  lastMasterHash=$(git log -n 1 --pretty=format:%H $masterHash -- $buildFiles)
                  echo "$lastMasterHash" > /tmp/git_grandparent
                  echo "Master branch last commit to modify build files is $lastMasterHash"
                fi
              fi

        name: Generate Cache Checksum
    - restore_cache:
        keys:
        - gradle-grandparent{{ checksum "/tmp/git_grandparent" }}-parent-{{ checksum "/tmp/git_parent" }}-child-{{ checksum "/tmp/git_previous_child" }}
        - gradle-grandparent{{ checksum "/tmp/git_grandparent" }}-parent-{{ checksum "/tmp/git_parent" }}
        - gradle-grandparent{{ checksum "/tmp/git_grandparent" }}
    - steps: << parameters.steps >>
    - save_cache:
        key: gradle-grandparent{{ checksum "/tmp/git_grandparent" }}-parent-{{ checksum "/tmp/git_parent" }}-child-{{ checksum "/tmp/git_latest_child" }}
        paths:
        - ~/.gradle/caches
        - ~/.gradle/wrapper
description: |
  Simplify common tasks for building and testing Java projects using Gradle.
display:
  home_url: https://gradle.org/
  source_url: https://github.com/entur/gradle-orb
examples:
  build_and_test:
    description: Checkout, build, and test a Gradle project
    usage:
      orbs:
        gradle: circleci/gradle@x.y
      version: 2.1
      workflows:
        checkout-build-test:
          jobs:
          - gradle/test
  custom_executor:
    description: |
      How to override the default executor and supply your own custom Docker image to the gradle orb jobs.
    usage:
      executors:
        my-executor:
          docker:
          - image: org/image:tag
      orbs:
        gradle: circleci/gradle@x.y
      version: 2.1
      workflows:
        gradle_test:
          jobs:
          - gradle/test:
              executor: my-executor
  custom_reports:
    description: |
      Publish custom results and reports.
    usage:
      orbs:
        gradle: circleci/gradle@x.y
      version: 2.1
      workflows:
        test-with-custom-reports:
          jobs:
          - gradle/test:
              store_artifacts: build/reports/
              test_command: myTests
              test_results_path: build/test-results/
executors:
  default:
    description: |
      This default Docker image is highly cached on CircleCI and contains most necessary tools needed for Gradle related projects.
    docker:
    - image: cimg/openjdk:<<parameters.tag>>
    parameters:
      tag:
        default: "13.0"
        description: |
          Pick a specific cimg/openjdk image tag: https://hub.docker.com/r/cimg/openjdk/tags
        type: string
jobs:
  run:
    description: |
      Checkout and run task in a gradle project.
    executor: << parameters.executor >>
    parameters:
      app_src_directory:
        default: ""
        description: Useful when the source of your maven project is nott in the root
          directory of your git repo. Supply the name of the directory or relative
          path of the directory containing your source code.
        type: string
      command:
        default: build
        type: string
      executor:
        default: default
        description: The name of custom executor to use
        type: executor
    steps:
    - checkout
    - with_cache:
        steps:
        - run:
            command: ./gradlew << parameters.command >>
            name: Run Task
            working_directory: << parameters.app_src_directory >>
  test:
    description: |
      Checkout, build and test a Gradle project.
    executor: << parameters.executor >>
    parameters:
      app_src_directory:
        default: ""
        description: Useful when the source of your maven project is nott in the root
          directory of your git repo. Supply the name of the directory or relative
          path of the directory containing your source code.
        type: string
      executor:
        default: default
        description: The name of custom executor to use
        type: executor
      reports_path:
        default: build/reports/
        description: Artifacts to be published
        type: string
      test_command:
        default: test
        type: string
      test_results_path:
        default: build/test-results/
        description: Results to be published
        type: string
    steps:
    - checkout
    - with_cache:
        steps:
        - run:
            command: ./gradlew << parameters.test_command >>
            name: Run Tests
            working_directory: << parameters.app_src_directory >>
    - collect_test_results:
        reports_path: <<parameters.reports_path>>
        test_results_path: <<parameters.test_results_path>>
version: 2.1
