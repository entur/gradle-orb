commands:
    collect_test_results:
        description: |
            Store test reports to build artifacts.
            Locate any JUnit test reports and store them as build artifacts and test results.
            Store the HTML build report to build artifacts.
        parameters:
            reports_path:
                default: build/reports/
                description: Artifacts to be published
                type: string
            test_results_path:
                default: build/test-results/
                description: Results to be published
                type: string
        steps:
            - when:
                condition: <<parameters.test_results_path>>
                steps:
                    - store_test_results:
                        path: <<parameters.test_results_path>>
                    - store_artifacts:
                        destination: Results
                        path: <<parameters.test_results_path>>
            - unless:
                condition: <<parameters.test_results_path>>
                steps:
                    - run:
                        command: |
                            mkdir -p /tmp/test_results/junit
                            find . -name '*TEST-*.xml' -exec cp -v {} /tmp/test_results/junit \;
                        name: Gather Test Results
                    - store_test_results:
                        path: /tmp/test_results
                    - store_artifacts:
                        destination: Results
                        path: /tmp/test_results
            - when:
                condition: <<parameters.reports_path>>
                steps:
                    - store_artifacts:
                        destination: Reports
                        path: <<parameters.reports_path>>
            - unless:
                condition: <<parameters.reports_path>>
                steps:
                    - store_artifacts:
                        destination: Reports
                        path: build/reports/tests/test/
    with_cache:
        description: |
            Run a set of steps with gradle dependencies cached.
            This command will first restore a cache of gradle dependencies, if one was
            saved by a previous build. The provided `steps` will then be executed, and
            if successful, then a fresh cache will be saved, if required.
            The contents of the `~/.gradle` directory is cached, which will substantially
            improve build times for projects with many dependencies.
            The cache-key is generated using the commit hash from from any files named
            `build.gradle` that are present in the `working_directory`.
        parameters:
            cache_checksum_file:
                default: build.gradle
                description: File to use to generate the cache checksum, defaults to build.gradle. For example if using Gradle Kotlin DSL then set to build.gradle.kts instead.
                type: string
            cache_key:
                description: Specify a custom cache key (optional).
                type: string
                default: v1
            steps:
                type: steps
        steps:
        - run:
            name: Generate Cache Checksum
            command: |
                # find build files
                buildFiles=$(find . -name '<< parameters.cache_checksum_file>>' | sed 's/.*/&/' | tr '\n' ' ')
                # get the latest commit which modified the build files
                lastHash=$(git log -n 1 --pretty=format:%H HEAD -- $buildFiles)
                # do a check that there actually is more than one revision
                if ! [ -z "$lastHash" ] && [ $(git rev-list --count HEAD) -gt "1" ]; then
                  # check which previous revision was the last to modify the build files
                  lastPreviousFirstHash=$(git log -n 1 --pretty=format:%H HEAD~1 -- $buildFiles)
                  if [ "$lastPreviousFirstHash" = "$lastHash" ]; then
                    echo "Build files did not update last commit"
                  else
                    echo "Build files did update last commit"
                  fi
                  if ! [ -z "$lastPreviousFirstHash" ] && [ $(git rev-list --count $lastPreviousFirstHash) -gt "1" ]; then
                    lastPreviousSecondHash=$(git log -n 1 --pretty=format:%H $lastPreviousFirstHash~1 -- $buildFiles)
                    echo "Second last time build files updated at $lastPreviousSecondHash"
                    if ! [ -z "$lastPreviousSecondHash" ] && [ $(git rev-list --count $lastPreviousSecondHash) -gt "1" ]; then
                      lastPreviousThirdHash=$(git log -n 1 --pretty=format:%H $lastPreviousSecondHash~1 -- $buildFiles)
                      if ! [ -z "$lastPreviousThirdHash" ]; then
                        echo "Third last time build files updated at $lastPreviousThirdHash"
                      fi
                    fi
                  fi
                else
                  echo "Build files did update last commit"
                fi
                if [ -z "$lastPreviousFirstHash" ]; then
                  lastPreviousFirstHash=$lastHash
                fi
                if [ -z "$lastPreviousSecondHash" ]; then
                  lastPreviousSecondHash=$lastHash
                fi
                if [ -z "$lastPreviousThirdHash" ]; then
                  lastPreviousThirdHash=$lastHash
                fi
                echo "$lastPreviousFirstHash" > /tmp/git_last_previous_first_hash
                echo "$lastPreviousSecondHash" > /tmp/git_last_previous_second_hash
                echo "$lastPreviousThirdHash" > /tmp/git_last_previous_third_hash
                echo "$lastHash" > /tmp/git_last_hash
                echo "success" > /tmp/build_status_success
                echo "failure" > /tmp/build_status_failure
        - restore_cache:
            keys:
              - gradle-<< parameters.cache_key >>-{{ checksum "/tmp/git_last_hash" }}-{{ checksum "./gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "/tmp/build_status_success" }}
              - gradle-<< parameters.cache_key >>-{{ checksum "/tmp/git_last_hash" }}-{{ checksum "./gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "/tmp/build_status_failure" }}
              - gradle-<< parameters.cache_key >>-{{ checksum "/tmp/git_last_previous_first_hash" }}-{{ checksum "./gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "/tmp/build_status_success" }}
              - gradle-<< parameters.cache_key >>-{{ checksum "/tmp/git_last_previous_first_hash" }}-{{ checksum "./gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "/tmp/build_status_failure" }}
              - gradle-<< parameters.cache_key >>-{{ checksum "/tmp/git_last_previous_second_hash" }}-{{ checksum "./gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "/tmp/build_status_success" }}
              - gradle-<< parameters.cache_key >>-{{ checksum "/tmp/git_last_previous_second_hash" }}-{{ checksum "./gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "/tmp/build_status_failure" }}
              - gradle-<< parameters.cache_key >>-{{ checksum "/tmp/git_last_previous_third_hash" }}-{{ checksum "./gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "/tmp/build_status_success" }}
              - gradle-<< parameters.cache_key >>-{{ checksum "/tmp/git_last_previous_third_hash" }}-{{ checksum "./gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "/tmp/build_status_failure" }}
        - run:
            name: Prepare cache cleanup.
            command: |
                touch /tmp/git_last_hash
                GRADLE_DIRECTORY="$HOME/.gradle"
                if [[ ! -e $GRADLE_DIRECTORY ]]; then
                  mkdir -p $GRADLE_DIRECTORY
                fi
                GRADLE_CACHE_DIRECTORY="$HOME/.gradle/caches"
                if [[ ! -e $GRADLE_CACHE_DIRECTORY ]]; then
                  mkdir -p $GRADLE_CACHE_DIRECTORY
                fi
                echo "Folder sizes:"
                du -h --max-depth=1 ~/.gradle/caches
                if cmp -s "/tmp/git_last_previous_first_hash" "/tmp/git_last_hash" ; then
                  echo "No new cache entry will be created"
                  GRADLE_PROPERTIES="$GRADLE_DIRECTORY/gradle.properties"
                  echo "org.gradle.cache.cleanup=false" >> $GRADLE_PROPERTIES
                fi
        - steps: << parameters.steps >>
        - run:
            name: Perform cache cleanup.
            when: on_success
            command: |
                echo "success" > /tmp/build_status
                # should the cache be cleaned?
                if [ -f ~/.gradle/caches/last_success_hash ]; then
                  if cmp -s ~/.gradle/caches/last_success_hash /tmp/git_last_hash ; then
                    echo "Cache does not need cleanup"
                    exit 0
                  fi
                fi
                # this is the first successful build with this particular set of build files
                echo "Clean up cache"
                touch /tmp/settings.gradle
                cat > /tmp/cleanup.gradle \<< 'endmsg'
                import static org.gradle.internal.serialize.BaseSerializerFactory.*
                import org.gradle.cache.internal.btree.BTreePersistentIndexedCache
                import java.io.FileFilter
                import org.gradle.internal.file.impl.DefaultDeleter
                import java.nio.file.Files
                def containsArtifacts(File parentDirectory, FileFilter fileFilter) {
                    File[] files = parentDirectory.listFiles(fileFilter);
                    if(files != null && files.length > 0) {
                        return true;
                    }
                    FileFilter dirFilter = {f -> f.isDirectory()};
                    File[] dirFiles = parentDirectory.listFiles(dirFilter);
                    if(dirFiles != null && dirFiles.length > 0) {
                        for(File dirFile : dirFiles) {
                            if(containsArtifacts(dirFile, fileFilter)) {
                                return true;
                            }
                        }
                    }
                    return false;
                }
                def isDependenciesTouched(File parentDirectory, BTreePersistentIndexedCache<File, Long> j, long deadline, FileFilter fileFilter) {
                    Long journalTimestamp = j.get(parentDirectory);
                    if(journalTimestamp != null) {
                        if(journalTimestamp >= deadline) {
                            if(containsArtifacts(parentDirectory, fileFilter)) {
                                return true;
                            }
                        }
                        return false;
                    }
                    long deleted = 0L;
                    FileFilter dirFilter = {f -> f.isDirectory()};
                    File[] dirFiles = parentDirectory.listFiles(dirFilter);
                    if(dirFiles != null && dirFiles.length > 0) {
                        for(File dirFile : dirFiles) {
                            if(isDependenciesTouched(dirFile, j, deadline, fileFilter)) {
                                return true;
                            }
                        }
                    }
                    return false;
                }
                def deleteFromDependencies(File parentDirectory, BTreePersistentIndexedCache<File, Long> j, long deadline, DefaultDeleter deleter, FileFilter fileFilter) {
                    Long journalTimestamp = j.get(parentDirectory);
                    if(journalTimestamp != null) {
                        if(journalTimestamp < deadline) {
                            if(containsArtifacts(parentDirectory, fileFilter)) {
                                j.remove(parentDirectory)
                                deleter.deleteRecursively(parentDirectory);
                                File parent = parentDirectory.getParentFile();
                                FileFilter siblingFilter = {f -> f.getName().startsWith(parentDirectory.getName())};
                                File[] siblings = parent.listFiles(siblingFilter);
                                if(siblings != null) {
                                    for(File sibling : siblings) {
                                        deleter.deleteRecursively(sibling);
                                    }
                                }
                                return 1;
                            }
                        }
                        return 0;
                    }
                    long deleted = 0L;
                    FileFilter dirFilter = {f -> f.isDirectory()};
                    File[] dirFiles = parentDirectory.listFiles(dirFilter);
                    if(dirFiles != null && dirFiles.length > 0) {
                        for(File dirFile : dirFiles) {
                            deleted += deleteFromDependencies(dirFile, j, deadline, deleter, fileFilter);
                        }
                    }
                    return deleted;
                }
                def isBuildCacheTouched(File parentDirectory, BTreePersistentIndexedCache<File, Long> j, long deadline) {
                    FileFilter f = {f -> f.isFile() && f.getName().length() == 32};
                    File[] fileFiles = parentDirectory.listFiles(f);
                    if(fileFiles != null && fileFiles.length > 0) {
                        for(File fileFile : fileFiles) {
                            Long journalTimestamp = j.get(fileFile);
                            if(journalTimestamp != null) {
                                if(journalTimestamp >= deadline) {
                                    return true
                                }
                            }
                        }
                    }
                    return false;
                }
                def deleteFromBuildCache(File parentDirectory, BTreePersistentIndexedCache<File, Long> j, long deadline, DefaultDeleter deleter) {
                    long deleted = 0L;
                    FileFilter f = {f -> f.isFile() && f.getName().length() == 32};
                    File[] fileFiles = parentDirectory.listFiles(f);
                    if(fileFiles != null && fileFiles.length > 0) {
                        for(File fileFile : fileFiles) {
                            Long journalTimestamp = j.get(fileFile);
                            if(journalTimestamp != null) {
                                if(journalTimestamp < deadline) {
                                    j.remove(fileFile)
                                    fileFile.delete()
                                    deleted++
                                }
                            }
                        }
                    }
                    return deleted;
                }
                tasks.register("deleteOutdatedCacheEntries") {
                    doLast {
                        File journalFile = new File("${project.gradle.gradleUserHomeDir}/caches/journal-1/file-access.bin");
                        BTreePersistentIndexedCache<String, Long> journal = new BTreePersistentIndexedCache<>(journalFile, FILE_SERIALIZER, LONG_SERIALIZER);
                        DefaultDeleter deleter = new DefaultDeleter({0L}, {f -> Files.isSymbolicLink(f.toPath())}, false);
                        File cachesDirectory = new File("${project.gradle.gradleUserHomeDir}/caches");
                        FileFilter jarCacheFilter = {f -> f.getName().startsWith("jars-") || f.name.startsWith("modules-") || f.name.startsWith("transforms-") };
                        File[] caches = cachesDirectory.listFiles(jarCacheFilter);
                        File deadlineFile = new File(deadline);
                        long lastModified = deadlineFile.lastModified();
                        boolean wasDependenciesTouched = false;
                        FileFilter touchedFileFilter = {f -> (f.getName().endsWith(".jar") && !f.getName().equals("cp_proj.jar") && !f.getName().equals("proj.jar") && !f.getName().equals("cp_settings.jar") && !f.getName().equals("settings.jar") ) || f.getName().endsWith(".aar") || f.getName().endsWith(".dex")};
                        for(File cache : caches) {
                            if(isDependenciesTouched(cache, journal, lastModified, touchedFileFilter)) {
                                wasDependenciesTouched = true;
                                break;
                            }
                        }
                        boolean wasBuildCacheTouched = false;
                        FileFilter buildCacheFilter = {f -> f.getName().startsWith("build-cache-") };
                        File[] buildCaches = cachesDirectory.listFiles(buildCacheFilter);
                        for(File cache : buildCaches) {
                            if(isBuildCacheTouched(cache, journal, lastModified)) {
                                wasBuildCacheTouched = true;
                                break;
                            }
                        }
                        if(wasDependenciesTouched || wasBuildCacheTouched) {
                            // so assuming that a build has been run
                            long deleted = 0;
                            if(wasDependenciesTouched) {
                                FileFilter fileFilter = {f -> (f.getName().endsWith(".jar") ) || f.getName().endsWith(".aar") || f.getName().endsWith(".dex")};
                                for(File cache : caches) {
                                    deleted += deleteFromDependencies (cache, journal, lastModified, deleter, fileFilter)
                                    }
                            }
                            long deletedFromBuildCache = 0;
                            if(wasBuildCacheTouched) {
                                for(File cache : buildCaches) {
                                    deletedFromBuildCache += deleteFromBuildCache(cache, journal, lastModified, deleter)
                                }
                            }
                            println 'Deleted ' + deleted + ' cache entries and ' + deletedFromBuildCache + ' from build cache'
                        } else {
                            println 'No dependencies or caches were touched, so assuming build did not execute and current cache content is still relevant'
                        }
                        journal.close()
                    }
                }
                endmsg
                echo "A new cache entry will be created, deleting files not accessed during this build.."
                ./gradlew --stop
                ./gradlew -b /tmp/cleanup.gradle -Pdeadline=/tmp/git_last_hash --no-daemon deleteOutdatedCacheEntries
        - run:
            name: Set cache flags for a successful build.
            when: on_success
            command: |
                echo "success" > /tmp/build_status
                cp /tmp/git_last_hash ~/.gradle/caches/last_success_hash
        - run:
            name: Set cache flags for a failed build.
            when: on_fail
            command: |
                # if the build has previously run successfully for this hash, we don't want to save another cache (which then would never be used, and would consume time and storage space)
                if [ -f ~/.gradle/caches/last_success_hash ]; then
                  if cmp -s ~/.gradle/caches/last_success_hash /tmp/git_last_hash ; then
                    echo "Cache was saved after a previously successful build for the latest build file changes, creating another cache entry for the failed state is unnecessary."
                    # emulate successful build
                    echo "success" > /tmp/build_status
                  else
                    echo "failure" > /tmp/build_status
                  fi
                else
                  echo "failure" > /tmp/build_status
                fi
        - save_cache:
            key: gradle-<< parameters.cache_key >>-{{ checksum "/tmp/git_last_hash" }}-{{ checksum "./gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "/tmp/build_status" }}
            when: always
            paths:
                - ~/.gradle/caches
                - ~/.gradle/wrapper
description: |
    Simplify common tasks for building and testing Java projects using Gradle.
    Based on the official CircleCI gradle orb version 2.2.0 and tested with
    gradle wrapper 6.6, this orb takes advantange of the git history when
    restoring caches, improving build time when build files are modified.
    Note: This orb uses internal Gradle classes to delete unused dependencies. This might
    break the build, if so revert to the official orb (and post an issue at
    https://github.com/entur/gradle-orb).
display:
    home_url: https://github.com/entur/gradle-orb
    source_url: https://github.com/entur/gradle-orb
examples:
    build_and_test:
        description: Checkout, build, and test a Gradle project
        usage:
            orbs:
                gradle: entur/gradle-orb@x.y
            version: 2.1
            workflows:
                checkout-build-test:
                    jobs:
                        - gradle/test
    custom_executor:
        description: |
            How to override the default executor and supply your own custom Docker image to the gradle orb jobs.
        usage:
            executors:
                my-executor:
                    docker:
                        - image: org/image:tag
                          auth:
                            username: $DOCKERHUB_LOGIN
                            password: $DOCKERHUB_PASSWORD
            orbs:
                gradle: entur/gradle-orb@x.y
            version: 2.1
            workflows:
                gradle_test:
                    jobs:
                        - gradle/test:
                            executor: my-executor
    custom_reports:
        description: |
            Publish custom results and reports.
        usage:
            orbs:
                gradle: entur/gradle-orb@x.y
            version: 2.1
            workflows:
                test-with-custom-reports:
                    jobs:
                        - gradle/test:
                            store_artifacts: build/reports/
                            test_command: myTests
                            test_results_path: build/test-results/
executors:
    default:
        description: |
            This default Docker image is highly cached on CircleCI and contains most necessary tools needed for Gradle related projects.
        docker:
            - image: cimg/openjdk:<<parameters.tag>>
              auth:
                username: $DOCKERHUB_LOGIN
                password: $DOCKERHUB_PASSWORD
        parameters:
            tag:
                default: "13.0"
                description: |
                    Pick a specific cimg/openjdk image tag: https://hub.docker.com/r/cimg/openjdk/tags
                type: string
jobs:
    run:
        description: |
            Checkout and run task in a gradle project.
             NB! Add $DOCKERHUB_LOGIN and $DOCKERHUB_PASSWORD credentials in your context to log in to Docker hub
        executor: << parameters.executor >>
        parameters:
            app_src_directory:
                default: ""
                description: Useful when the source of your maven project is not in the root directory of your git repo. Supply the name of the directory or relative path of the directory containing your source code.
                type: string
            cache_checksum_file:
                default: build.gradle
                description: File to use to generate the cache checksum, defaults to build.gradle.  For example if using Gradle Kotlin DSL then set to build.gradle.kts instead.
                type: string
            cache_key:
                default: v1
                description: Add a custom suffix to your cache key in the event you need to work with multiple maven caches.
                type: string
            command:
                default: build
                type: string
            executor:
                default: default
                description: The name of custom executor to use
                type: executor
        steps:
            - checkout
            - with_cache:
                steps:
                    - run:
                        cache_checksum_file: << parameters.cache_checksum_file >>
                        cache_key: << parameters.cache_key >>
                        command: ./gradlew << parameters.command >>
                        name: Run Task
                        working_directory: << parameters.app_src_directory >>
    test:
        description: |
            Checkout, build and test a Gradle project.
             NB! Add $DOCKERHUB_LOGIN and $DOCKERHUB_PASSWORD credentials in your context to log in to Docker hub
        executor: << parameters.executor >>
        parameters:
            app_src_directory:
                default: ""
                description: Useful when the source of your maven project is not in the root directory of your git repo. Supply the name of the directory or relative path of the directory containing your source code.
                type: string
            cache_checksum_file:
                default: build.gradle
                description: File to use to generate the cache checksum, defaults to build.gradle.  For example if using Gradle Kotlin DSL then set to build.gradle.kts instead.
                type: string
            cache_key:
                default: v1
                description: Add a custom suffix to your cache key in the event you need to work with multiple maven caches.
                type: string
            executor:
                default: default
                description: The name of custom executor to use
                type: executor
            reports_path:
                default: build/reports/
                description: Artifacts to be published
                type: string
            test_command:
                default: test
                type: string
            test_results_path:
                default: build/test-results/
                description: Results to be published
                type: string
        steps:
            - checkout
            - with_cache:
                steps:
                    - run:
                        cache_checksum_file: << parameters.cache_checksum_file >>
                        cache_key: << parameters.cache_key >>
                        command: ./gradlew << parameters.test_command >>
                        name: Run Tests
                        working_directory: << parameters.app_src_directory >>
            - collect_test_results:
                reports_path: <<parameters.reports_path>>
                test_results_path: <<parameters.test_results_path>>
version: 2.1
